@inherits Page

<form method="post" novalidate>

    @if (ErrorList.Any())
    {
        <GDSErrorSummary ErrorList="@ErrorList" Title="@("There is a problem")" />
    }

    <AntiForgery AntiForgeryToken="@AntiForgery" />

    <h1 class="govuk-heading-l">Physical activity page 2 of 4</h1>

    <h2 class="govuk-heading-m">During the last week, approximately how many hours did you spend on each of the following activities?</h2>

    <GDSRadios Name="PhysicalActivity"
               IdPrefix="physical-activity"
               Hint="@(new GDSHint.Options {
                    Text="For example, swimming, jogging, aerobics, football, tennis, gym workout. This question does not include walking, gardening or housework. There will be detailed questions about these activities on an upcoming page."
               })"
               Items="PhysicalActivityItems"
               ErrorMessage="PhysicalActivityError.AsErrorMessageComponent()"
               FieldSet="@(new GDSFieldSet.Options {
                    Legend = new GDSFieldSet.LegendOptions {
                        Text = "Physical activity",
                        Classes="govuk-label--s"
                    }
               })" />

    <GDSRadios Name="Cycling"
               Items="CyclingItems"
               IdPrefix="cycling"
               Hint="@(new GDSHint.Options {
                    Text="Include cycling to work and for recreation."
               })"
               ErrorMessage="CyclingError.AsErrorMessageComponent()"
               FieldSet="@(new GDSFieldSet.Options {
                    Legend = new GDSFieldSet.LegendOptions {
                        Text = "Cycling",
                        Classes="govuk-label--s"
                    }
               })" />

    <GDSButton PreventDoubleClick="true" Text="Continue" Type="GDSButton.InputType.Submit" />
</form>

@code {
    [Parameter]
    public string PhysicalActivityError { get; set; }

    [Parameter]
    public string CyclingError { get; set; }

    [Parameter]
    public string Cycling { get; set; }

    [Parameter]
    public string PhysicalActivity { get; set; }

    static IEnumerable<dynamic> Items = new[]{
        new {Text="None", Value="none" },
        new {Text="Some but less than 1 hour", Value="lessthanonehour" },
        new {Text="Between 1 and 3 hours", Value="onetothreehours" },
        new {Text="3 hours or more", Value="threehoursormore" }
    };

    protected IList<GDSRadios.Item> PhysicalActivityItems =>
        Items.AsRadioComponents(x => x.Value, x => x.Text, PhysicalActivity);

    protected IList<GDSRadios.Item> CyclingItems =>
        Items.AsRadioComponents(x => x.Value, x => x.Text, Cycling);

}