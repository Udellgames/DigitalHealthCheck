<div class="govuk-panel govuk-panel--confirmation @Classes" @attributes="InputAttributes">
    @Header(HeadingLevel ?? 1, TitleInner)
    @if (ChildContent is not null || !string.IsNullOrEmpty(Text))
    {
        <div class="govuk-panel__body">
            @if (ChildContent is null)
            {
                @Text
            }
            else
            {
                @ChildContent
            }
        </div>
    }
</div>

@code {

    protected RenderFragment Header(int level, RenderFragment inner)
    {
        switch (level)
        {
            case 2:
                return@<h2 class="govuk-panel__title">@inner</h2>;
            case 3:
                return @<h3 class="govuk-panel__title">@inner</h3>;
            case 4:
                return @<h4 class="govuk-panel__title">@inner</h4>;
            case 5:
                return @<h5 class="govuk-panel__title">@inner</h5>;
            case 6:
                return @<h6 class="govuk-panel__title">@inner</h6>;
            default:
            case 1:
                return @<h1 class="govuk-panel__title">@inner</h1>;
        }
    }

    protected RenderFragment TitleInner
    {
        get
        {
            if (TitleContent is null)
            {
                return (builder => builder.AddContent(0, TitleText));
            }
            else
            {
                return TitleContent;
            }
        }
    }

    public class Options // For other components
    {

        public string Classes { get; set; }

        public int? HeadingLevel { get; set; }

        public string TitleText { get; set; }

        public RenderFragment TitleContent { get; set; }

        public IDictionary<string, object> Attributes { get; set; }

        public string Text { get; set; }
    }

    [Parameter]
    public string Classes { get; set; }

    [Parameter]
    public int? HeadingLevel { get; set; }

    [Parameter]
    public string TitleText { get; set; }

    [Parameter]
    public RenderFragment TitleContent { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> InputAttributes { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string Text { get; set; }

}