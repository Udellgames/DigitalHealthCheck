<dl class="govuk-summary-list @Classes" @attributes="InputAttributes">
    @foreach (var row in Rows.Where(x => x is not null))
    {
        <div class="govuk-summary-list__row @row.Classes">
        <dt class="govuk-summary-list__key @row.Key.Classes">
            @if (row.Key.Content is null)
            {
                @row.Key.Text;
            }
            else
            {
                @row.Key.Content;
            }
        </dt>
        <dd class="govuk-summary-list__value @row.Value.Classes">
            @if (row.Value.Content is null)
            {
                @row.Value.Text;
            }
            else
            {
                @row.Value.Content;
            }
        </dd>

        @if (row.ActionItems?.Any() ?? false)
        {
            <dd class="govuk-summary-list__actions @row.ActionClasses">
                @if (row.ActionItems.Count() == 1)
                {
                    @ActionLink(row.ActionItems.Single())
                }
                else
                {
                    <ul class="govuk-summary-list__actions-list">
                        @foreach (var action in row.ActionItems)
                        {
                            <li class="govuk-summary-list__actions-list-item">
                                @ActionLink(action)
                            </li>
                        }
                    </ul>
                }
            </dd>
        }
        else if (AnyRowHasActions)
        {
            <span class="govuk-summary-list__actions"></span>
        }
        </div>
    }
</dl>

@code {

    protected RenderFragment ActionLink(Row.Item action) =>
    @<a class="govuk-link @action.Classes"
        href="@action.Href" @attributes="action.Attributes">
        @if (action.Content is null)
        {
            @action.Text;
        }
        else
        {
            @action.Content;
        }
        @if (!string.IsNullOrEmpty(action.VisuallyHiddenText))
        {
            <span class="govuk-visually-hidden"> @action.VisuallyHiddenText</span>
        }
    </a>;

protected bool AnyRowHasActions => Rows?.Any(x => (x.ActionItems?.Any() ?? false)) ?? false;

public class Options //For other components
{
    public IList<GDSSummaryList.Row> Rows { get; set; }

    public string Classes { get; set; }

    public IDictionary<string, object> InputAttributes { get; set; }
}

public class Row
{
    public class Cell
    {
        public string Text { get; set; }

        public RenderFragment Content { get; set; }

        public string Classes { get; set; }
    }

    public class Item
    {
        public string Href { get; set; }

        public string Text { get; set; }

        public string VisuallyHiddenText { get; set; }

        public RenderFragment Content { get; set; }

        public string Classes { get; set; }

        public IDictionary<string, object> Attributes { get; set; }
    }

    public IList<Item> ActionItems { get; set; }

    public string ActionClasses { get; set; }

    public Cell Key { get; set; } = new Cell();

    public Cell Value { get; set; } = new Cell();

    public string Classes { get; set; }
}

[Parameter]
public IList<GDSSummaryList.Row> Rows { get; set; }

[Parameter]
public string Classes { get; set; }

[Parameter(CaptureUnmatchedValues = true)]
public IDictionary<string, object> InputAttributes { get; set; }

}