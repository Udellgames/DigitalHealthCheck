@switch (ActualElement)
{
    case ButtonType.A:
        <a href="@ActualHRef" role="button" draggable="false" class="govuk-button @DisabledClass @Classes @StartButtonClass" data-module="govuk-button" data-prevent-double-click="@PreventDoubleClickAttribute" @attributes="InputAttributes">
            @if (ChildContent is null)
            {
                @Text
            }
            else
            {
                @ChildContent
            }
            @if (IsStartButton)
            {
                <svg class="govuk-button__start-icon" xmlns="http://www.w3.org/2000/svg" width="17.5" height="19" viewBox="0 0 33 40" aria-hidden="true" focusable="false">
                    <path fill="currentColor" d="M0 0h13l20 20-20 20H0l20-20z" />
                </svg>
            }
        </a>
        break;
    case ButtonType.Button:
        <button value="@Value" type="@TypeString" class="govuk-button @DisabledClass @Classes @StartButtonClass" data-module="govuk-button" name="@Name" disabled="@DisabledText" aria-disabled="@AriaDisabledText" data-prevent-double-click="@PreventDoubleClickAttribute" @attributes="InputAttributes">
            @if (ChildContent is null)
            {
                @Text
            }
            else
            {
                @ChildContent
            }
            @if (IsStartButton)
            {
                <svg class="govuk-button__start-icon" xmlns="http://www.w3.org/2000/svg" width="17.5" height="19" viewBox="0 0 33 40" aria-hidden="true" focusable="false">
                    <path fill="currentColor" d="M0 0h13l20 20-20 20H0l20-20z" />
                </svg>
            }
        </button>
        break;
    case ButtonType.Input:
        <input value="@Text" type="@InputTypeString" class="govuk-button @DisabledClass @Classes" data-module="govuk-button" disabled="@DisabledText" name="@Name" aria-disabled="@AriaDisabledText" data-prevent-double-click="@PreventDoubleClickAttribute" @attributes="InputAttributes">
        break;
}

@code {

    public class Options // For other components
    {
        public IDictionary<string, object> Attributes { get; set; }
        public string Value { get; set; }
        public InputType? Type { get; set; }
        public ButtonType? Element { get; set; }
        public string HRef { get; set; }
        public string Text { get; set; }
        public string Name { get; set; }
        public bool Disabled { get; set; }
        public string Classes { get; set; }
        public bool IsStartButton { get; set; }
        public bool PreventDoubleClick { get; set; }
        public RenderFragment Content { get; set; }
    }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> InputAttributes { get; set; }

    public enum ButtonType
    {
        A,
        Button,
        Input
    }

    public enum InputType
    {
        Button,
        Reset,
        Submit
    }

    [Parameter]
    public string Value { get; set; }

    protected string TypeString => Type.HasValue ? Type.ToString().ToLowerInvariant() : null;

    [Parameter]
    public InputType? Type { get; set; }

    protected string InputTypeString => (Type ?? InputType.Submit).ToString().ToLowerInvariant();

    [Parameter]
    public ButtonType? Element { get; set; }

    protected ButtonType ActualElement => Element ?? (string.IsNullOrEmpty(HRef) ? ButtonType.Button : ButtonType.A);

    [Parameter]
    public string HRef { get; set; }

    protected string ActualHRef => string.IsNullOrEmpty(HRef) ? "#" : HRef;

    [Parameter]
    public string Text { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    protected string DisabledClass => Disabled ? "govuk-button--disabled" : null;

    protected string DisabledText => Disabled ? "disabled" : null;

    protected string AriaDisabledText => Disabled ? "true" : null;

    [Parameter]
    public string Classes { get; set; }

    [Parameter]
    public bool IsStartButton { get; set; }

    protected string StartButtonClass => IsStartButton ? "govuk-button--start" : null;

    [Parameter]
    public bool PreventDoubleClick { get; set; }

    protected string PreventDoubleClickAttribute => PreventDoubleClick ? "true" : null;

    [Parameter]
    public RenderFragment ChildContent { get; set; }

}